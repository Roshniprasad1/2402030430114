import tkinter as tk
from tkinter import messagebox

class ToDoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List")
        self.root.geometry("400x500")
      
        self.tasks = []
        
        self.label = tk.Label(root, text="To-Do List", font=("Arial", 20))
        self.label.pack(pady=10)
        
        self.entry = tk.Entry(root, width=25, font=("Arial", 14))
        self.entry.pack(pady=10)
        
        self.add_button = tk.Button(root, text="Add Task", command=self.add_task)
        self.add_button.pack(pady=5)

        self.listbox = tk.Listbox(root, selectmode=tk.SINGLE, width=30, height=10, font=("Arial", 12))
        self.listbox.pack(pady=10)

        self.complete_button = tk.Button(root, text="Mark Completed", command=self.mark_completed)
        self.complete_button.pack(side=tk.LEFT, padx=10)
        
        self.delete_button = tk.Button(root, text="Delete Task", command=self.delete_task)
        self.delete_button.pack(side=tk.RIGHT, padx=10)

        self.animate_background()

    def animate_background(self):
        colors = ["#ffadad", "#ffd6a5", "#fdffb6", "#caffbf", "#9bf6ff", "#a0c4ff", "#bdb2ff"]
        color = colors.pop(0)
        self.root.config(bg=color)
        colors.append(color)
        self.root.after(1000, self.animate_background)

    def add_task(self):
        task = self.entry.get()
        if task.strip() == "":
            messagebox.showwarning("Warning", "Task cannot be empty!")
            return
        self.tasks.append({'task': task, 'completed': False})
        self.listbox.insert(tk.END, f"{task} - Pending")
        self.entry.delete(0, tk.END)

    def mark_completed(self):
        try:
            index = self.listbox.curselection()[0]
            self.tasks[index]['completed'] = True
            self.listbox.delete(index)
            self.listbox.insert(index, f"{self.tasks[index]['task']} - Done")
        except IndexError:
            messagebox.showwarning("Warning", "Please select a task to mark as completed!")

    def delete_task(self):
        try:
            index = self.listbox.curselection()[0]
            self.listbox.delete(index)
            removed_task = self.tasks.pop(index)
            messagebox.showinfo("Task Deleted", f"Deleted Task: {removed_task['task']}")
        except IndexError:
            messagebox.showwarning("Warning", "Please select a task to delete!")

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()
